<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>dao</name>
	<filePath>${preFix}_Modules/src/main/java/${packageName}/modules/${moduleName}/dao</filePath>
	<fileName>${ClassName}Dao.java</fileName>
	<content><![CDATA[

package ${packageName}.modules.${moduleName}.dao;

import ${packageName}.modules.${moduleName}.entity.${ClassName};
import com.useeinfo.framework.extend.dao.CrudDao;
import com.useeinfo.framework.sugar.data.QueryParam;
import com.useeinfo.framework.sugar.data.QueryUtils;
import com.useeinfo.framework.sugar.tools.CommonSugar;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Repository;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Author: AutoGenerate  Date: ${date}
 */
@Repository("systemUserDaoWeb")
public class ${ClassName}Dao implements CrudDao<${ClassName}> {

	private final static Logger logger = LoggerFactory.getLogger(${ClassName}Dao.class);

	@PersistenceContext
	private EntityManager entityManager;

	// ******************************************************************************
	// ******************************* 代码自动生成开始 *******************************
	// ******************************************************************************

	public Map<String, Object> getSearchCondition(QueryParam queryParam) {

		queryParam = CommonSugar.getTypedDefault(queryParam, new QueryParam(0));
		Map<String, String> queryHash = queryParam.getSqlMap();

		Map<String, Object> conditionHash = new HashMap<>();
		if (queryHash == null || queryHash.size() == 0) {
			return conditionHash;
		}

		for (String queryKey : queryHash.keySet()) {
			String queryValue = queryHash.get(queryKey);

			switch (queryKey) {
				case "userAccount":
					conditionHash.put("s.userAccount = ?{paramIndex} ", queryValue);
					continue;
			}

			conditionHash.put("userId < ?{paramIndex}", 0L);
			break;
		}

		return conditionHash;
	}

	@Override
	public Long totalRecord(QueryParam queryParam) {

		Map<String, Object> conditions = getSearchCondition(queryParam);
		TypedQuery<Long> typedQuery = QueryUtils.getTypedQueryByCondition("select count(s) from ${ClassName} s ", conditions, entityManager, Long.class);
		return typedQuery.getSingleResult();
	}

	@Override
	public List<${ClassName}> findList(QueryParam queryParam) {

		String sqlInfo = queryParam.joinJPQL("select s from ${ClassName} s ", "order by s.userId desc ");

		Map<String, Object> conditions = getSearchCondition(queryParam);
		TypedQuery<${ClassName}> typedQuery = QueryUtils.getTypedQueryByCondition(sqlInfo, conditions, entityManager, ${ClassName}.class);

		return queryParam.findPageList(typedQuery);
	}

	@Override
	public ${ClassName} findModel(Long userId) {
		return entityManager.find(${ClassName}.class, userId);
	}

	@Override
	public Integer add(${ClassName} systemUser) {
		entityManager.persist(systemUser);
		logger.info("${ClassName}DaoImpl添加systemUser成功！");
		return 1;
	}

	@Override
	public Integer update(${ClassName} systemUser) {
		${ClassName} exist${ClassName} = entityManager.find(${ClassName}.class, systemUser.getUserId());
		exist${ClassName}.setUserAccount(systemUser.getUserAccount());
		exist${ClassName}.setUserPassword(systemUser.getUserPassword());
		exist${ClassName}.setUserName(systemUser.getUserName());
		exist${ClassName}.setSystemManager(systemUser.isSystemManager());
		exist${ClassName}.setSystemRole(systemUser.getSystemRole());
		exist${ClassName}.setEnabled(systemUser.isEnabled());
		exist${ClassName}.setValid(systemUser.isValid());
		return 1;
	}

	public void logicRemove(Long userId) {
		${ClassName} exist${ClassName} = entityManager.find(${ClassName}.class, userId);
		exist${ClassName}.setValid(false);
	}

	@Override
	public Integer delete(Long userId) {
		${ClassName} exist${ClassName} = entityManager.find(${ClassName}.class, userId);
		entityManager.remove(exist${ClassName});
		return 1;
	}

	// ******************************************************************************
	// ******************************* 代码自动生成结束 *******************************
	// ******************************************************************************
}

]]>
	</content>
</template>